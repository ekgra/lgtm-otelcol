---
# Source: lgtm-distributed/charts/loki/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "minio-sa"
  namespace: "lgtm-poc-8"
---
# Source: lgtm-distributed/charts/grafana/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: lgtm-grafana
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  
  admin-user: "YWRtaW4="
  admin-password: "OXRuSmVQWDN1Wk1iY2Z1RFQ0MXNvNGtjakhBS0FjOFRjMk9lMjdqRg=="
  ldap-toml: ""
---
# Source: lgtm-distributed/charts/loki/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: lgtm-minio
  namespace: "lgtm-poc-8"
  labels:
    app: minio
    chart: minio-4.0.15
    release: lgtm
    heritage: Helm
type: Opaque
data:
  rootUser: "ZW50ZXJwcmlzZS1sb2dz"
  rootPassword: "c3VwZXJzZWNyZXQ="
---
# Source: lgtm-distributed/charts/grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lgtm-grafana
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
data:
  
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    domain = ''
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - isDefault: false
      name: Loki
      type: loki
      uid: loki
      url: http://lgtm-loki-query-frontend:3100
    - isDefault: false
      jsonData:
        lokiSearch:
          datasourceUid: loki
        serviceMap:
          datasourceUid: prom
        tracesToLogsV2:
          datasourceUid: loki
        tracesToMetrics:
          datasourceUid: prom
      name: Tempo
      type: tempo
      uid: tempo
      url: http://lgtm-tempo-query-frontend:3200
---
# Source: lgtm-distributed/charts/loki/charts/minio/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lgtm-minio
  namespace: "lgtm-poc-8"
  labels:
    app: minio
    chart: minio-4.0.15
    release: lgtm
    heritage: Helm
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4
      OBJECTLOCKING=$5
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
    # Create the bucket if it does not exist and set objectlocking if enabled (NOTE: versioning will be not changed if OBJECTLOCKING is set because it enables versioning to the Buckets created)
    if ! checkBucketExists $BUCKET ; then
        if [ ! -z $OBJECTLOCKING ] ; then
          if [ $OBJECTLOCKING = true ] ; then
              echo "Creating bucket with OBJECTLOCKING '$BUCKET'"
              ${MC} mb --with-lock myminio/$BUCKET
          elif [ $OBJECTLOCKING = false ] ; then
                echo "Creating bucket '$BUCKET'"
                ${MC} mb myminio/$BUCKET
          fi
      elif [ -z $OBJECTLOCKING ] ; then
            echo "Creating bucket '$BUCKET'"
            ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."  
      fi
      fi
    
    
      # set versioning for bucket if objectlocking is disabled or not set
      if [ -z $OBJECTLOCKING ] ; then
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi
    
    
      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
    
    
    
    # Create the buckets
    createBucket chunks none false  
    createBucket ruler none false  
    createBucket admin none false  
  add-user: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # AccessKey and secretkey credentials file are added to prevent shell execution errors caused by special characters.
    # Special characters for example : ',",<,>,{,}
    MINIO_ACCESSKEY_SECRETKEY_TMP="/tmp/accessKey_and_secretKey_tmp"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkUserExists ()
    # Check if the user exists, by using the exit code of `mc admin user info`
    checkUserExists() {
      CMD=$(${MC} admin user info myminio $(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP) > /dev/null 2>&1)
      return $?
    }
    
    # createUser ($policy)
    createUser() {
      POLICY=$1
      #check accessKey_and_secretKey_tmp file
      if [[ ! -f $MINIO_ACCESSKEY_SECRETKEY_TMP ]];then
        echo "credentials file does not exist"
        return 1
      fi
      if [[ $(cat $MINIO_ACCESSKEY_SECRETKEY_TMP|wc -l) -ne 2 ]];then
        echo "credentials file is invalid"
        rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP
        return 1
      fi
      USER=$(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP)
      # Create the user if it does not exist
      if ! checkUserExists ; then
        echo "Creating user '$USER'"
        cat $MINIO_ACCESSKEY_SECRETKEY_TMP | ${MC} admin user add myminio
      else
        echo "User '$USER' already exists."
      fi
      #clean up credentials files.
      rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP
    
      # set policy for user
      if [ ! -z $POLICY -a $POLICY != " " ] ; then
          echo "Adding policy '$POLICY' for '$USER'"
          ${MC} admin policy set myminio $POLICY user=$USER
      else
          echo "User '$USER' has no policy attached."
      fi
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
    
    
    
    # Create the users
    echo console > $MINIO_ACCESSKEY_SECRETKEY_TMP
    echo console123 >> $MINIO_ACCESSKEY_SECRETKEY_TMP
    createUser consoleAdmin
    
  add-policy: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkPolicyExists ($policy)
    # Check if the policy exists, by using the exit code of `mc admin policy info`
    checkPolicyExists() {
      POLICY=$1
      CMD=$(${MC} admin policy info myminio $POLICY > /dev/null 2>&1)
      return $?
    }
    
    # createPolicy($name, $filename)
    createPolicy () {
      NAME=$1
      FILENAME=$2
    
      # Create the name if it does not exist
      echo "Checking policy: $NAME (in /config/$FILENAME.json)"
      if ! checkPolicyExists $NAME ; then
        echo "Creating policy '$NAME'"
      else
        echo "Policy '$NAME' already exists."
      fi
      ${MC} admin policy add myminio $NAME /config/$FILENAME.json
    
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
    
    
  custom-command: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # runCommand ($@)
    # Run custom mc command
    runCommand() {
      ${MC} "$@"
      return $?
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
---
# Source: lgtm-distributed/charts/loki/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    
    auth_enabled: true
    common:
      compactor_address: 'http://lgtm-loki-compactor:3100'
      path_prefix: /var/loki
      replication_factor: 3
      storage:
        s3:
          access_key_id: enterprise-logs
          bucketnames: chunks
          endpoint: lgtm-minio.lgtm-poc-8.svc:9000
          insecure: true
          s3forcepathstyle: true
          secret_access_key: supersecret
    frontend:
      scheduler_address: lgtm-loki-query-scheduler.lgtm-poc-8.svc.cluster.local:9095
      tail_proxy_url: http://lgtm-loki-querier.lgtm-poc-8.svc.cluster.local:3100
    frontend_worker:
      scheduler_address: lgtm-loki-query-scheduler.lgtm-poc-8.svc.cluster.local:9095
    index_gateway:
      mode: simple
    limits_config:
      max_cache_freshness_per_query: 10m
      query_timeout: 300s
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      split_queries_by_interval: 15m
      volume_enabled: true
    memberlist:
      join_members:
      - loki-memberlist
    pattern_ingester:
      enabled: false
    query_range:
      align_queries_with_step: true
    ruler:
      storage:
        s3:
          bucketnames: ruler
        type: s3
    runtime_config:
      file: /etc/loki/runtime-config/runtime-config.yaml
    schema_config:
      configs:
      - from: "2024-01-01"
        index:
          period: 24h
          prefix: index_
        object_store: s3
        schema: v13
        store: tsdb
    server:
      grpc_listen_port: 9095
      http_listen_port: 3100
      http_server_read_timeout: 600s
      http_server_write_timeout: 600s
    storage_config:
      boltdb_shipper:
        index_gateway_client:
          server_address: dns+lgtm-loki-index-gateway-headless.lgtm-poc-8.svc.cluster.local:9095
      hedging:
        at: 250ms
        max_per_second: 20
        up_to: 3
      tsdb_shipper:
        index_gateway_client:
          server_address: dns+lgtm-loki-index-gateway-headless.lgtm-poc-8.svc.cluster.local:9095
    tracing:
      enabled: false
---
# Source: lgtm-distributed/charts/loki/templates/runtime-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-runtime
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
data:
  runtime-config.yaml: |
    {}
---
# Source: lgtm-distributed/charts/otelcol/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lgtm-otelcol
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: otelcol-0.133.0
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "0.134.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: opentelemetry-collector
    app.kubernetes.io/component: standalone-collector
data:
  relay: |
    exporters:
      debug: {}
      otlphttp/loki:
        endpoint: http://lgtm-loki-distributor:3100/otlp
        tls:
          insecure: true
      otlphttp/tempo:
        endpoint: http://lgtm-tempo-distributor:4318
        tls:
          insecure: true
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
    processors:
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:14250
          thrift_compact:
            endpoint: ${env:MY_POD_IP}:6831
          thrift_http:
            endpoint: ${env:MY_POD_IP}:14268
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
      zipkin:
        endpoint: ${env:MY_POD_IP}:9411
    service:
      extensions:
      - health_check
      pipelines:
        logs:
          exporters:
          - otlphttp/loki
          processors:
          - batch
          receivers:
          - otlp
        metrics:
          exporters:
          - debug
          processors:
          - memory_limiter
          - batch
          receivers:
          - otlp
          - prometheus
        traces:
          exporters:
          - otlphttp/tempo
          - debug
          processors:
          - memory_limiter
          - batch
          receivers:
          - otlp
          - jaeger
          - zipkin
      telemetry:
        logs:
          processors:
          - batch:
              exporter:
                otlp:
                  endpoint: http://lgtm-loki-distributor:3100/otlp
                  protocol: http/protobuf
        metrics:
          readers:
          - pull:
              exporter:
                prometheus:
                  host: ${env:MY_POD_IP}
                  port: 8888
---
# Source: lgtm-distributed/charts/grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
  name: lgtm-grafana-clusterrole
rules: []
---
# Source: lgtm-distributed/charts/grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: lgtm-grafana-clusterrolebinding
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: lgtm
    namespace: lgtm-poc-8
roleRef:
  kind: ClusterRole
  name: lgtm-grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: lgtm-distributed/charts/grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: lgtm-grafana
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
rules: []
---
# Source: lgtm-distributed/charts/grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: lgtm-grafana
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: lgtm-grafana
subjects:
- kind: ServiceAccount
  name: lgtm
  namespace: lgtm-poc-8
---
# Source: lgtm-distributed/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-grafana
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: lgtm
---
# Source: lgtm-distributed/charts/loki/charts/minio/templates/console-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-minio-console
  namespace: "lgtm-poc-8"
  labels:
    app: minio
    chart: minio-4.0.15
    release: lgtm
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9001
      protocol: TCP
      targetPort: 9001
  selector:
    app: minio
    release: lgtm
---
# Source: lgtm-distributed/charts/loki/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-minio
  namespace: "lgtm-poc-8"
  labels:
    app: minio
    chart: minio-4.0.15
    release: lgtm
    heritage: Helm
    monitoring: "true"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: lgtm
---
# Source: lgtm-distributed/charts/loki/charts/minio/templates/statefulset.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-minio-svc
  namespace: "lgtm-poc-8"
  labels:
    app: minio
    chart: minio-4.0.15
    release: "lgtm"
    heritage: "Helm"
spec:
  publishNotReadyAddresses: true
  clusterIP: None
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: lgtm
---
# Source: lgtm-distributed/charts/loki/templates/compactor/service-compactor.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-loki-compactor
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: compactor
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: compactor
---
# Source: lgtm-distributed/charts/loki/templates/distributor/service-distributor-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-loki-distributor-headless
  namespace: lgtm-poc-8
  labels:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: distributor
    variant: headless
    prometheus.io/service-monitor: "false"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: distributor
---
# Source: lgtm-distributed/charts/loki/templates/distributor/service-distributor.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-loki-distributor
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: distributor
---
# Source: lgtm-distributed/charts/loki/templates/index-gateway/service-index-gateway-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-loki-index-gateway-headless
  labels:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: index-gateway
    prometheus.io/service-monitor: "false"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: index-gateway
---
# Source: lgtm-distributed/charts/loki/templates/index-gateway/service-index-gateway.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-loki-index-gateway
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: index-gateway
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: index-gateway
---
# Source: lgtm-distributed/charts/loki/templates/ingester/service-ingester-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-loki-ingester-headless
  namespace: lgtm-poc-8
  labels:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: ingester
    prometheus.io/service-monitor: "false"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: ingester
---
# Source: lgtm-distributed/charts/loki/templates/ingester/service-ingester.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-loki-ingester
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: ingester
---
# Source: lgtm-distributed/charts/loki/templates/querier/service-querier.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-loki-querier
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: querier
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: querier
---
# Source: lgtm-distributed/charts/loki/templates/query-frontend/service-query-frontend-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-loki-query-frontend-headless
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
    prometheus.io/service-monitor: "false"
spec:
  clusterIP: None
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
    - name: grpclb
      port: 9096
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: query-frontend
---
# Source: lgtm-distributed/charts/loki/templates/query-frontend/service-query-frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-loki-query-frontend
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
    - name: grpclb
      port: 9096
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: query-frontend
---
# Source: lgtm-distributed/charts/loki/templates/query-scheduler/service-query-scheduler.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-loki-query-scheduler
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-scheduler
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpclb
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/component: query-scheduler
---
# Source: lgtm-distributed/charts/loki/templates/service-memberlist.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-memberlist
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp
      port: 7946
      targetPort: http-memberlist
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/part-of: memberlist
---
# Source: lgtm-distributed/charts/otelcol/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lgtm-otelcol
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: otelcol-0.133.0
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "0.134.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: opentelemetry-collector
    app.kubernetes.io/component: standalone-collector
    component: standalone-collector
spec:
  type: ClusterIP
  ports:
    
    - name: jaeger-compact
      port: 6831
      targetPort: 6831
      protocol: UDP
    - name: jaeger-grpc
      port: 14250
      targetPort: 14250
      protocol: TCP
    - name: jaeger-thrift
      port: 14268
      targetPort: 14268
      protocol: TCP
    - name: otlp
      port: 4317
      targetPort: 4317
      protocol: TCP
      appProtocol: grpc
    - name: otlp-http
      port: 4318
      targetPort: 4318
      protocol: TCP
    - name: zipkin
      port: 9411
      targetPort: 9411
      protocol: TCP
  selector:
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/instance: lgtm
    component: standalone-collector
  internalTrafficPolicy: Cluster
---
# Source: lgtm-distributed/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lgtm-grafana
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: lgtm
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: lgtm
      annotations:
        checksum/config: 5dc36ac5c9c62bf733f379b3cfb4aeb105f98d26de06636bacca64e81b2cee2b
        checksum/sc-dashboard-provider-config: 593c0a8778b83f11fe80ccb21dfb20bc46705e2be3178df1dc4c89d164c8cd9c
        checksum/secret: b03db2f7e07badd97c5e9d3e7a18515eeafcfbf4547ee67a2c4751cb75daec0a
        kubectl.kubernetes.io/default-container: grafana
    spec:
      
      serviceAccountName: lgtm
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "docker.io/grafana/grafana:10.4.3"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: config
              mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
              subPath: "datasources.yaml"
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
            - name: gossip-tcp
              containerPort: 9094
              protocol: TCP
            - name: gossip-udp
              containerPort: 9094
              protocol: UDP
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: lgtm-grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lgtm-grafana
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 128Mi
      volumes:
        - name: config
          configMap:
            name: lgtm-grafana
        - name: storage
          emptyDir: {}
---
# Source: lgtm-distributed/charts/loki/templates/distributor/deployment-distributor.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lgtm-loki-distributor
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: lgtm
      app.kubernetes.io/component: distributor
  template:
    metadata:
      annotations:
        checksum/config: 58f5223625e58cb4700631914f06bd61c282892b3804b4598894d78c24f0ccd6
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: lgtm
        app.kubernetes.io/component: distributor
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: lgtm
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: distributor
          image: docker.io/grafana/loki:3.1.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=distributor
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            null
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 128Mi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: distributor
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: loki
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: loki-runtime
---
# Source: lgtm-distributed/charts/loki/templates/querier/deployment-querier.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lgtm-loki-querier
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: querier
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: lgtm
      app.kubernetes.io/component: querier
  template:
    metadata:
      annotations:
        checksum/config: 58f5223625e58cb4700631914f06bd61c282892b3804b4598894d78c24f0ccd6
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: lgtm
        app.kubernetes.io/component: querier
        app.kubernetes.io/part-of: memberlist
    spec:
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: querier
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      serviceAccountName: lgtm
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: querier
          image: docker.io/grafana/loki:3.1.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=querier
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            null
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 128Mi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: querier
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: loki
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: loki-runtime
        - name: data
          emptyDir: {}
---
# Source: lgtm-distributed/charts/loki/templates/query-frontend/deployment-query-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lgtm-loki-query-frontend
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-frontend
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: lgtm
      app.kubernetes.io/component: query-frontend
  template:
    metadata:
      annotations:
        checksum/config: 58f5223625e58cb4700631914f06bd61c282892b3804b4598894d78c24f0ccd6
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: lgtm
        app.kubernetes.io/component: query-frontend
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: lgtm
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: query-frontend
          image: docker.io/grafana/loki:3.1.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=query-frontend
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 128Mi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: query-frontend
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: loki
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: loki-runtime
---
# Source: lgtm-distributed/charts/loki/templates/query-scheduler/deployment-query-scheduler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lgtm-loki-query-scheduler
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: query-scheduler
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: lgtm
      app.kubernetes.io/component: query-scheduler
  template:
    metadata:
      annotations:
        checksum/config: 58f5223625e58cb4700631914f06bd61c282892b3804b4598894d78c24f0ccd6
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: lgtm
        app.kubernetes.io/component: query-scheduler
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: lgtm
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: query-scheduler
          image: docker.io/grafana/loki:3.1.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=query-scheduler
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            null
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: query-scheduler
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: loki
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: loki-runtime
---
# Source: lgtm-distributed/charts/otelcol/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lgtm-otelcol
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: otelcol-0.133.0
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "0.134.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: opentelemetry-collector
    app.kubernetes.io/component: standalone-collector
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: otelcol
      app.kubernetes.io/instance: lgtm
      component: standalone-collector
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 843832bdc96adfba4646c5a9704070b94c894606fe249ce11f6f46dfe428bb22
        
      labels:
        app.kubernetes.io/name: otelcol
        app.kubernetes.io/instance: lgtm
        component: standalone-collector
        
    spec:
      
      serviceAccountName: lgtm
      automountServiceAccountToken: true
      securityContext:
        {}
      containers:
        - name: otelcol
          command:
            - /otelcol-k8s
          args:
            - --config=/conf/relay.yaml
          securityContext:
            {}
          image: "ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-k8s:0.134.1"
          imagePullPolicy: IfNotPresent
          ports:
            
            - name: jaeger-compact
              containerPort: 6831
              protocol: UDP
            - name: jaeger-grpc
              containerPort: 14250
              protocol: TCP
            - name: jaeger-thrift
              containerPort: 14268
              protocol: TCP
            - name: otlp
              containerPort: 4317
              protocol: TCP
            - name: otlp-http
              containerPort: 4318
              protocol: TCP
            - name: zipkin
              containerPort: 9411
              protocol: TCP
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: GOMEMLIMIT
              value: "102MiB"
            - name: OTEL_SERVICE_NAME
              value: '{{ .Release.Name }}-otelcol'
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 128Mi
          volumeMounts:
            - mountPath: /conf
              name: otelcol-configmap
      volumes:
        - name: otelcol-configmap
          configMap:
            name: lgtm-otelcol
            items:
              - key: relay
                path: relay.yaml
      hostNetwork: false
---
# Source: lgtm-distributed/charts/loki/charts/minio/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: lgtm-minio
  namespace: "lgtm-poc-8"
  labels:
    app: minio
    chart: minio-4.0.15
    release: lgtm
    heritage: Helm
spec:
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: "Parallel"
  serviceName: lgtm-minio-svc
  replicas: 1
  selector:
    matchLabels:
      app: minio
      release: lgtm
  template:
    metadata:
      name: lgtm-minio
      labels:
        app: minio
        release: lgtm
      annotations:
        checksum/secrets: bb6eb18776deb7b7c400f3b203d77edf18c7c49c7596b3686fa9096f04ca5bdc
        checksum/config: 68a2e10b14482e5c16f5b615b53e496349433ea0236aeacc742afb4e2d21f6c4
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch

      serviceAccountName: minio-sa
      containers:
        - name: minio
          image: quay.io/minio/minio:RELEASE.2022-09-17T00-09-45Z
          imagePullPolicy: IfNotPresent

          command: [ "/bin/sh",
            "-ce",
            "/usr/bin/docker-entrypoint.sh minio server  http://lgtm-minio-{0...0}.lgtm-minio-svc.lgtm-poc-8.svc.cluster.local/export-{0...1} -S /etc/minio/certs/ --address :9000 --console-address :9001" ]
          volumeMounts:
            - name: export-0
              mountPath: /export-0
            - name: export-1
              mountPath: /export-1            
          ports:
            - name: http
              containerPort: 9000
            - name: http-console
              containerPort: 9001
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: lgtm-minio
                  key: rootUser
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lgtm-minio
                  key: rootPassword
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
          resources:
            requests:
              cpu: 50m
              memory: 128Mi      
      volumes:
        - name: minio-user
          secret:
            secretName: lgtm-minio        
  volumeClaimTemplates:
    - metadata:
        name: export-0
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi
    - metadata:
        name: export-1
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi
---
# Source: lgtm-distributed/charts/loki/templates/compactor/statefulset-compactor.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: lgtm-loki-compactor
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: lgtm-loki-compactor-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: lgtm
      app.kubernetes.io/component: compactor
  template:
    metadata:
      annotations:
        checksum/config: 58f5223625e58cb4700631914f06bd61c282892b3804b4598894d78c24f0ccd6
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: lgtm
        app.kubernetes.io/component: compactor
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: lgtm
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: compactor
          image: docker.io/grafana/loki:3.1.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=compactor
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          
          volumeMounts:
            - name: temp
              mountPath: /tmp
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 128Mi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: compactor
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: temp
          emptyDir: {}
        - name: config
          configMap:
            name: loki
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: loki-runtime
        - name: data
          emptyDir: {}
---
# Source: lgtm-distributed/charts/loki/templates/index-gateway/statefulset-index-gateway.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: lgtm-loki-index-gateway
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: index-gateway
spec:
  replicas: 1
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: lgtm-loki-index-gateway-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: lgtm
      app.kubernetes.io/component: index-gateway
  template:
    metadata:
      annotations:
        checksum/config: 58f5223625e58cb4700631914f06bd61c282892b3804b4598894d78c24f0ccd6
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: lgtm
        app.kubernetes.io/component: index-gateway
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: lgtm
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 300
      containers:
        - name: index-gateway
          image: docker.io/grafana/loki:3.1.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=index-gateway
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            null
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 128Mi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: index-gateway
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: loki
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: loki-runtime
        - name: data
          emptyDir: {}
---
# Source: lgtm-distributed/charts/loki/templates/ingester/statefulset-ingester.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: lgtm-loki-ingester
  namespace: lgtm-poc-8
  labels:
    helm.sh/chart: loki-6.9.0
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: lgtm-loki-ingester-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: lgtm
      app.kubernetes.io/component: ingester
  template:
    metadata:
      annotations:
        checksum/config: 58f5223625e58cb4700631914f06bd61c282892b3804b4598894d78c24f0ccd6
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: lgtm
        app.kubernetes.io/component: ingester
        app.kubernetes.io/part-of: memberlist
    spec:
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: ingester
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      serviceAccountName: lgtm
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 300
      containers:
        - name: ingester
          image: docker.io/grafana/loki:3.1.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -ingester.availability-zone=zone-default
            - -target=ingester
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 128Mi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: ingester
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: loki
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: loki-runtime
        - name: data
          emptyDir: { }
---
# Source: lgtm-distributed/charts/grafana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lgtm-grafana-test
  namespace: lgtm-poc-8
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
data:
  run.sh: |-
    @test "Test Health" {
      url="http://lgtm-grafana/api/health"

      code=$(wget --server-response --spider --timeout 90 --tries 10 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: lgtm-distributed/charts/grafana/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: lgtm-grafana-test
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: lgtm
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  namespace: lgtm-poc-8
spec:
  serviceAccountName: default
  containers:
    - name: lgtm-test
      image: "docker.io/bats/bats:v1.4.1"
      imagePullPolicy: "IfNotPresent"
      command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
  volumes:
    - name: tests
      configMap:
        name: lgtm-grafana-test
  restartPolicy: Never
---
# Source: lgtm-distributed/charts/loki/charts/minio/templates/post-install-create-bucket-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: lgtm-minio-make-bucket-job
  namespace: "lgtm-poc-8"
  labels:
    app: minio-make-bucket-job
    chart: minio-4.0.15
    release: lgtm
    heritage: Helm
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: minio-job
        release: lgtm
    spec:
      restartPolicy: OnFailure      
      volumes:
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: lgtm-minio
            - secret:
                name: lgtm-minio

      serviceAccountName: minio-sa
      containers:
      - name: minio-mc
        image: "quay.io/minio/mc:RELEASE.2022-09-16T09-16-47Z"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "/config/initialize"]
        env:
          - name: MINIO_ENDPOINT
            value: lgtm-minio
          - name: MINIO_PORT
            value: "9000"
        volumeMounts:
          - name: minio-configuration
            mountPath: /config
        resources:
          requests:
            memory: 128Mi
---
# Source: lgtm-distributed/charts/loki/charts/minio/templates/post-install-create-user-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: lgtm-minio-make-user-job
  namespace: "lgtm-poc-8"
  labels:
    app: minio-make-user-job
    chart: minio-4.0.15
    release: lgtm
    heritage: Helm
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: minio-job
        release: lgtm
    spec:
      restartPolicy: OnFailure      
      volumes:
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: lgtm-minio
            - secret:
                name: lgtm-minio

      serviceAccountName: minio-sa
      containers:
      - name: minio-mc
        image: "quay.io/minio/mc:RELEASE.2022-09-16T09-16-47Z"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "/config/add-user"]
        env:
          - name: MINIO_ENDPOINT
            value: lgtm-minio
          - name: MINIO_PORT
            value: "9000"
        volumeMounts:
          - name: minio-configuration
            mountPath: /config
        resources:
          requests:
            memory: 128Mi
